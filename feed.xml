<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://missingchou.github.io//</id><title>周大丰</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2022-07-10T09:49:32+08:00</updated> <author> <name>周大丰</name> <uri>https://missingchou.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://missingchou.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://missingchou.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 周大丰 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Ssh互信</title><link href="https://missingchou.github.io//posts/SSH%E4%BA%92%E4%BF%A1/" rel="alternate" type="text/html" title="Ssh互信" /><published>2022-06-30T00:00:00+08:00</published> <updated>2022-06-30T00:00:00+08:00</updated> <id>https://missingchou.github.io//posts/SSH%E4%BA%92%E4%BF%A1/</id> <content src="https://missingchou.github.io//posts/SSH%E4%BA%92%E4%BF%A1/" /> <author> <name>周大丰</name> </author> <summary> 对称加密和非对称加密 对称加密（AES,DES,3DES） 加解密使用的是同一个密钥，简单，速度快。 非对称加密（RSA,DSA,ECC） 公钥加密，私钥解密 a.client向server发起登录请求 b.server将公钥发送给client c.client获得公钥后，使用公钥对信息加密发送给server d.server收到client发送的加密后的信息，使用私钥解密，验证client的身份，返回登录结果 基于上述过程无法避免中间人攻击，避免中间人攻击主要是要确认server端的公钥真实性 加密、解密使用的是不同的密钥算法，即公钥和私钥。公、私钥是一对存在的。如果用公钥加密，只有用对应的私钥才能解密，反之亦是如此。 数字证书 是标记通讯各方身份信息的一串数字，用来验证身份的方式。是身份认证机构（CA)加在数字身份证上的一个签名，绑定了公钥及其持有者的真... </summary> </entry> <entry><title>Ogg经典模式与微服务模式</title><link href="https://missingchou.github.io//posts/Ogg%E7%BB%8F%E5%85%B8%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%BC%8F/" rel="alternate" type="text/html" title="Ogg经典模式与微服务模式" /><published>2022-06-22T00:00:00+08:00</published> <updated>2022-06-22T00:00:00+08:00</updated> <id>https://missingchou.github.io//posts/Ogg%E7%BB%8F%E5%85%B8%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%BC%8F/</id> <content src="https://missingchou.github.io//posts/Ogg%E7%BB%8F%E5%85%B8%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%BC%8F/" /> <author> <name>周大丰</name> </author> <summary> OGG classic 传统架构的ogg模式下的组成部分 manager process extract process datapump process server collector process replicat process trail files checkpoint files OGG mircoservices 微服务架构模式下的组别部分(&amp;gt;=V12.3) service manager 查询、配置部署信息等 adminstration server 用于配置文件、创建用户、添加附加日志、创建抽取和投递进程，类似在ggsci命令下添加附加日志、extract、replicat进程操作 distribution server 用于创建传输进程，类似于以前的pump进程 receiver server... </summary> </entry> <entry><title>Docker学习</title><link href="https://missingchou.github.io//posts/docker%E5%AD%A6%E4%B9%A0/" rel="alternate" type="text/html" title="Docker学习" /><published>2022-06-16T00:00:00+08:00</published> <updated>2022-07-01T13:59:01+08:00</updated> <id>https://missingchou.github.io//posts/docker%E5%AD%A6%E4%B9%A0/</id> <content src="https://missingchou.github.io//posts/docker%E5%AD%A6%E4%B9%A0/" /> <author> <name>周大丰</name> </author> <summary> docker运行环境的隔离 文件系统隔离、网络隔离、进程隔离、进程间通信隔离 Cgroup IPC Network Mount Pid User UTS 离线导入docker镜像文件 找到一台可以联网的docker机器，并pull到本地并打包 docker save postgres -o postgres.tar 将tar包上传至内网，并导入镜像文件 docker load -i postgres.tar 查看本地的images docker images 基础命令 后台运行容器 docker run -d &amp;lt;docker-image&amp;gt; docker container run -idt --name mynginx -p 8000:8000 nginx 容器start/stop/restart docker con... </summary> </entry> <entry><title>Git使用初体验</title><link href="https://missingchou.github.io//posts/git%E4%BD%BF%E7%94%A8%E5%88%9D%E4%BD%93%E9%AA%8C/" rel="alternate" type="text/html" title="Git使用初体验" /><published>2022-06-15T00:00:00+08:00</published> <updated>2022-06-15T20:15:36+08:00</updated> <id>https://missingchou.github.io//posts/git%E4%BD%BF%E7%94%A8%E5%88%9D%E4%BD%93%E9%AA%8C/</id> <content src="https://missingchou.github.io//posts/git%E4%BD%BF%E7%94%A8%E5%88%9D%E4%BD%93%E9%AA%8C/" /> <author> <name>周大丰</name> </author> <summary> git相关概念 文件状态 已跟踪和未跟踪，已跟踪的文件是指被纳入版本控制的文件即git跟踪的文件，它的状态可以是未修改，已修改，已暂存。工作区中除了已跟踪的文件其余都是未跟踪的文件 git分支概念 git保存的是不同时刻的快照,git分支实质上仅包含所指对象校验和（长度为40的SHA-1值字符串）的文件。创建一个分支相当于往一个文件中写入41个字节 三方合并（merge）和变基（rebase） merge：将两个分支的最新快照以及二者最近的共同祖先进行三方合并，合并的结果生成一个新的快照并提交 rebase：将提交到某一分支的修改都移至另一个分支上，再进行一次快进合并 将topicbranch变基到basebranch中 git rebase &amp;lt;basebranch&amp;gt; &amp;lt;topicbranch&amp;gt; 变基的风险：如果提交存在于你的仓库之外，而... </summary> </entry> <entry><title>GSH的使用方法</title><link href="https://missingchou.github.io//posts/gsh%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/" rel="alternate" type="text/html" title="GSH的使用方法" /><published>2022-06-13T11:33:00+08:00</published> <updated>2022-06-13T11:33:00+08:00</updated> <id>https://missingchou.github.io//posts/gsh%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/</id> <content src="https://missingchou.github.io//posts/gsh%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/" /> <author> <name>dafeng</name> </author> <category term="GSH" /> <category term="GRPC" /> <summary> # 使用GSH GSH(Genius Shell), 是基于GRPC基础上封装一层shell命令，你可以像linux原生命令一样使用grpc的功能 函数方法 gcall 映射 grpc.call() - 执行远程主机命令调用. gcp 映射grpc.cp() - 跨节点传输文件. 返回值 按命令输出内容和返回码 命令详解 gcall 详解 Usage: gcall [OPTIONS] 单行命令: gcall -i 10.182.244.54 -c 'date' [-u genius] [-t sh] [-m 600] [-s True] 多行输入流EOF: gcall -i 10.182.244.54 [-u genius] [-t sh] [-m 600] [-s True] &amp;lt;&amp;l... </summary> </entry> </feed>
