[ { "title": "Ssh互信", "url": "/posts/SSH%E4%BA%92%E4%BF%A1/", "categories": "", "tags": "", "date": "2022-06-30 00:00:00 +0800", "snippet": "对称加密和非对称加密 对称加密（AES,DES,3DES）加解密使用的是同一个密钥，简单，速度快。 非对称加密（RSA,DSA,ECC）公钥加密，私钥解密a.client向server发起登录请求b.server将公钥发送给clientc.client获得公钥后，使用公钥对信息加密发送给serverd.server收到client发送的加密后的信息，使用私钥解密，验证client的身份，返回登录结果基于上述过程无法避免中间人攻击，避免中间人攻击主要是要确认server端的公钥真实性加密、解密使用的是不同的密钥算法，即公钥和私钥。公、私钥是一对存在的。如果用公钥加密，只有用对应的私钥才能解密，反之亦是如此。数字证书是标记通讯各方身份信息的一串数字，用来验证身份的方式。是身份认证机构（CA)加在数字身份证上的一个签名，绑定了公钥及其持有者的真实身份数字签名数字签名是将摘要信息用发送者的私钥加密与原文一起发送至接收者，接收者只有通过发送者的公钥才能解密被加密的摘要信息，然后用hash函数对原文产生摘要信息，比对两个摘要信息是否相同。若相同代码，收到的信息是完整的，没有在传输过程中被修改。数字签名是个加密过程，数字签名验证是个解密过程SSH互信使用ssh-keygen生成公、私钥文件，使用ssh-copy-id拷贝公钥文件到远程机器的authorized_keys文件中 首先，在要配置互信的机器上，生成各自的经过认证的key文件； 其次，将所有的key文件汇总到一个总的认证文件中； 将这个包含了所有互信机器认证key的认证文件，分发到各个机器中去； 验证互信 SSH是如何解决中间人攻击 基于口令认证通过client端自己对server端的公钥进行确认，若被确认，会被追加到known_hosts中，再重复上述非对称加密的认证流程 基于公钥认证 手动将client的公钥添加到server端的authorized_keys文件中 client向server发起登录请求，server收到后，生成随机数R，并用client的公钥对其加密，得到pubkey（R),并发送给client client收到后，用私钥解密获得R，用MD5对R和session key生成摘要信息Digest1，并发送给server server也用同样的算法对R和session key生成摘要信息Digest2，比对Digest1和Digest2是否相同 " }, { "title": "Ogg经典模式与微服务模式", "url": "/posts/Ogg%E7%BB%8F%E5%85%B8%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%BC%8F/", "categories": "", "tags": "", "date": "2022-06-22 00:00:00 +0800", "snippet": "OGG classic传统架构的ogg模式下的组成部分 manager process extract process datapump process server collector process replicat process trail files checkpoint filesOGG mircoservices微服务架构模式下的组别部分(&gt;=V12.3) service manager查询、配置部署信息等 adminstration server用于配置文件、创建用户、添加附加日志、创建抽取和投递进程，类似在ggsci命令下添加附加日志、extract、replicat进程操作 distribution server用于创建传输进程，类似于以前的pump进程 receiver server接收进程，类似于以前的server collector进程 pefromance metrics server性能监控服务微服务的相关目录1.OGG_HOME ogg软件目录2.服务管理路径 service manager home3.部署路径 deployment home" }, { "title": "Docker学习", "url": "/posts/docker%E5%AD%A6%E4%B9%A0/", "categories": "", "tags": "", "date": "2022-06-16 00:00:00 +0800", "snippet": "docker运行环境的隔离文件系统隔离、网络隔离、进程隔离、进程间通信隔离 Cgroup IPC Network Mount Pid User UTS离线导入docker镜像文件 找到一台可以联网的docker机器，并pull到本地并打包docker save postgres -o postgres.tar 将tar包上传至内网，并导入镜像文件docker load -i postgres.tar 查看本地的imagesdocker images基础命令后台运行容器docker run -d &lt;docker-image&gt;docker container run -idt --name mynginx -p 8000:8000 nginx容器start/stop/restartdocker container stop mynginxchroot到容器docker container attch mynginxdocker container exec -it mynginx sh从容器chroot环境中退出ctrl + p + q ##不停止容器，退出到宿主机shell中exit ##停止容器，退出到宿主机shell中不进入容器内执行容器命令docker container exec -it mynginx uname -a查看所有容器进程（包含退出的）docker ps -a 删除容器docker rm &lt;container_id&gt;docker container rm -f mynginx查看本地的imagesdocker images删除imagedocker rmi &lt;image_name&gt;Mount的类型1. bind mount被存在宿主机的任意文件系统位置，甚至是需要root权限才可访问的目录，非docker进程可以对这部分的文件系统进行修改docker run -idt --name mynginx --mount type=bind,source=\"$(pwd)/target\",target=/app nginx:lastest2. volume 持久化存储最佳方式被存放在宿主机的文件系统中，由docker管理。非docker进程无法修改这部分文件系统在linux系统中的路径为： /var/lib/docker/volumes/xxxxdocker volume create my-voldocker volume lsdocker volume inspect my-voldocker volume rm my-vol运行：docker run -idt --name mynginx -v my-vol:/app nginx:lastestdocker run -idt --name mynginx --mount source=my-vol,target=/app nginx:lastest3. memory (tmpfs mount)被存放在宿主机的内存中，并不会写入宿主机的文件系统，临时存储，更好的性能docker run -idt --name test --mount type=tmpfs,destination=/app nginx:lastest网络配置docker port mynginx docker logs -f mynginxdockerfile组成结构：基础镜像信息、维护者信息、镜像操作指令、容器启动时执行指令• FROM格式：FROM &lt;image&gt; or FROM &lt;image&gt;:&lt;tag&gt;如果在同一个Dockerfile中创建多个镜像时，可以使用多个 FROM 指令• MAINTAINER维护者信息• RUN格式：RUN &lt;command&gt; 或 RUN [\"executable\", \"param1\", \"param2\"]格式1在shell终端中运行，其他终端可以通过第二种方式实现RUN 指令将对镜像执行跟随的命令。每运行一条 RUN 指令，镜像添加新的一层，并提交。• CMD指定运行容器时的操作命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。格式：CMD [\"executable\",\"param1\",\"param2\"] 使用 exec 执行，推荐方式；CMD command param1 param2 在 /bin/sh 中执行，提供给需要交互的应用；CMD [\"param1\",\"param2\"] 提供给 ENTRYPOINT 的默认参数；• EXPOSE告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配一个端口转发到指定的端口。EXPOSE &lt;port&gt;[&lt;port&gt;...]• ENV格式：ENV &lt;key&gt;&lt;value&gt;指定一个环境变量，会被后续 RUN 指令使用，并在容器运行时保持• ADDADD &lt;src&gt; &lt;dest&gt;该命令将复制指定的 &lt;src&gt; 到容器中的 &lt;dest&gt;。 其中 &lt;src&gt; 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）• COPYCOPY &lt;src&gt; &lt;dest&gt;复制本地主机的 &lt;src&gt;（为 Dockerfile 所在目录的相对路径）到容器中的 &lt;dest&gt;,当使用本地目录为源目录时，推荐使用 COPY• ENTRYPOINTENTRYPOINT [\"executable\", \"param1\", \"param2\"]ENTRYPOINT command param1 param2（shell中执行）配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。每个 Dockerfile 中只能有一个 ENTRYPOINT，当指定多个时，只有最后一个起效• VOLUMEVOLUME [\"/data\"]创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。• USER指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户.当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户，例如：RUN groupadd -r postgres &amp;&amp; useradd -r -g postgres postgres。要临时获取管理员权限可以使用 gosu，而不推荐 sudo。• WORKDIRWORKDIR /path/to/workdir为后续的 RUN、CMD、ENTRYPOINT 指令配置工作目录,可以使用多个 WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径• ONBUILD配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令" }, { "title": "Git使用初体验", "url": "/posts/git%E4%BD%BF%E7%94%A8%E5%88%9D%E4%BD%93%E9%AA%8C/", "categories": "", "tags": "", "date": "2022-06-15 00:00:00 +0800", "snippet": "git相关概念 文件状态已跟踪和未跟踪，已跟踪的文件是指被纳入版本控制的文件即git跟踪的文件，它的状态可以是未修改，已修改，已暂存。工作区中除了已跟踪的文件其余都是未跟踪的文件git分支概念git保存的是不同时刻的快照,git分支实质上仅包含所指对象校验和（长度为40的SHA-1值字符串）的文件。创建一个分支相当于往一个文件中写入41个字节三方合并（merge）和变基（rebase）merge：将两个分支的最新快照以及二者最近的共同祖先进行三方合并，合并的结果生成一个新的快照并提交rebase：将提交到某一分支的修改都移至另一个分支上，再进行一次快进合并将topicbranch变基到basebranch中git rebase &lt;basebranch&gt; &lt;topicbranch&gt;变基的风险：如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基git常用命令空目录添加git跟踪git init跟踪新文件、将已跟踪的文件放到暂存区git add &lt;filename&gt;/&lt;path&gt;检查文件状态git statusgit staus -s两列 左列代表暂存区的状态 右列代表工作区的状态？？ 新添加未跟踪A 新添加到暂存区M 修改过的文件比较当前文件和暂存区快照的差异，即修改后未暂存的内容git diff比较已暂存文件与最后一次提交的文件差异git diff --staged（等同cached）移除文件跟踪，并删除文件git rm &lt;filename&gt;从git仓库中移除文件，但仍然保留当前工作目录git rm --cached &lt;filename&gt;重命名文件git mv file1 file2查看提交历史,显示每次提交所引入的差异，-n 显示最近n次的提交git log -p -ngit log --stat （统计显示）git log --pretty=oneline / short / full / fullergit log --pretty=format:\"%h - %an, %ar :%s\"git提交提交带注释git commit -m '注释'跳过暂存直接提交git commit -a撤销操作git commit --amendeg.第二次提交将替代第一次提交的结果git commit -m 'inital commit'git add forgotten_filegit commit --amendgit取消操作取消暂存git reset HEAD &lt;file&gt;撤销对文件的修改git checkout -- &lt;file&gt;git远程仓库查看远程仓库git remote -vgit remote show &lt;remote&gt;添加远程仓库git remote add &lt;shortname&gt; &lt;url&gt;fetch:拉取远程仓库中本地没有的数据，但不会合并git fetch &lt;remote-shortname&gt;pull：从抓取数据并尝试合并到当前所在的分支git pullgit push &lt;remote&gt; &lt;branch&gt;远程仓库的重命名git remote rename远程仓库的删除git remote remove/rmgit标签标签分为：轻量标签（很像一个不会改变的分支）、附注标签（存储在git数据库中的一个完整的对象）显示git标签git tag打标签git tag -a &lt;版本号&gt; -m '注释'git tag &lt;版本号&gt;git分支创建分支git branch &lt;newbranch&gt;分支切换git checkout &lt;branch&gt;创建分支并切换git checkout -b &lt;newbranch&gt;删除分支git branch -d &lt;branch&gt;查看分叉历史git log --oneline --decorate --graph --all合并分支（切换到主分支，合并叉分支，成功合并后，删除叉分支）git checkout &lt;branch1&gt;git merge &lt;left-branch&gt;git branch -d &lt;left-branch&gt;遇到合并分支冲突时，通过git status查看，并手动修改冲突，冲突合并的工具：mergetool、opendiff etc)冲突解决后加入到暂存区 git add再提交 git commit查看每个分支的最后一次提交git branch -v /-vv--merged 过滤列表中已经合并到**当前**分支的分支清单(合并过的分支可以考虑删除)--no-merged 过滤列表中尚未合并到**当前**分支的分支清单合并分支git branch --merged &lt;branch&gt;从服务器上拉取本地没有的数据，不会修改工作区的内容，需要自己合并（git merge）git fetch从服务器上抓取数据，并尝试合并入那个远程分支git pull=git fetch + git merge合并分支后，删除远程分支git push &lt;remotename&gt; --delete &lt;branch&gt;" }, { "title": "GSH的使用方法", "url": "/posts/gsh%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/", "categories": "GSH, GRPC", "tags": "TAG", "date": "2022-06-13 11:33:00 +0800", "snippet": "# 使用GSHGSH(Genius Shell), 是基于GRPC基础上封装一层shell命令，你可以像linux原生命令一样使用grpc的功能函数方法 gcall 映射 grpc.call() - 执行远程主机命令调用. gcp 映射grpc.cp() - 跨节点传输文件.返回值按命令输出内容和返回码命令详解 gcall 详解 Usage: gcall [OPTIONS] 单行命令:\tgcall -i 10.182.244.54 -c 'date' [-u genius] [-t sh] [-m 600] [-s True]\t 多行输入流EOF:\tgcall -i 10.182.244.54 [-u genius] [-t sh] [-m 600] [-s True] &lt;&lt;EOF echo hello world EOF\t Options: -ip, -i TEXT input a ip address 目标主机地址 #不为空 -cmd, -c TEXT input your command 命令 #不为空 -user, -u TEXT input exec user 执行用户 #不为空 -passwd, -p TEXT input exec passwd 口令 #默认空 -type, -t TEXT input script sh/py/bat 脚本类型 #默认sh,可选sh/py/bat -stdless, -s TEXT stdout less 输出简化 #默认True,减少时间和字符 -timeout, -m INTEGER input timeout seconds 超时时间单位秒 #默认600秒 --help Show this message and exit. 示例1：执行命令 uname -a gcall -i 10.182.244.54 -c 'uname -a' Linux JTZDFB244054 2.6.32-696.30.1.el6.x86_64 #1 SMP Fri May 18 11:50:44 EDT 2018 x86_64 x86_64 x86_64 GNU/Linux 示例2：在远端主机查询文件，并使用awk获取第四列的值。（注意：需要对$4进行转义，因为$4为远程主机的变量。） gcall -i $dg_ip -t sh -c \"cat /tmp/$instance_name/PrimaryDBCheck.log |grep \"Version:\"|awk -F ' ' '{print \\$4}'\" 示例3：在远端主机查询进程，并使用grep语句。 gcall -i $IP -t sh -c \"ps -ef | grep -v \"grep\"| grep root\" 示例4：win主机执行gcall命令（不带命令回显，最后一个EOF需要放句首） gcall -i 10.190.38.75 -t bat &lt;&lt;EOF @echo off cd c:\\\\temp cmd /c \"cscript /nologo add_remove_program_office_installed_check.vbs\" If errorlevel 0 ( Echo \"Run Script successfully\" ) Else ( Echo \"Run Script unsuccessfully\" exit 2 ) EOF 示例5：判断目标主机目录是否存在（不需要命令输出，将输出追加到/dev/null中） gcall -i $dg_ip -t sh -u root -c \"ls -ld /u01/oracle/product/db11gr2\" &amp;&gt;/dev/null if [ $? -eq 0 ];then echo \"dir exist!\" else echo \"dir not exist!\" exit 1 fi 示例6：使用目标主机的变量(1.使用\\进行转义 2.在分界符EOF前添加反斜杠\\，或者用单引号、双引号括起来。) 若想使用目标主机的变量，例如hostname、$HOME gcall -i $IP -t sh &lt;&lt;EOF echo \\`hostname\\` echo \\$HOME EOF\t gcall -i $IP -t sh &lt;&lt;\\EOF echo `hostname` echo $HOME EOF 若使用全局里的变量，则无需转义。 if条件中的数值是目标主机的进程数，需要添加\\；而instance_name是全局定义的变量，则无需添加\\。 gcall -i $dg_ip -t sh &lt;&lt;EOF if [ \\$(ps -ef|grep -v \"grep\"|grep oracle|grep smon|grep ${instance_name}|wc -l) -gt 0 ];then\t\techo \"Oracle Instance ${instance_name} is running in the machine $IP ,cannot to install instance ${instance_name},exit !\"\texit 1 fi 示例7：示例6的补充 gcall -i $IP -u root -t sh &lt;&lt; \\EOF ORA_PMON=`ps -ef | grep 'ora_pmon' | grep -v grep &gt; /dev/null 2&gt;&amp;1;echo $?` DB2_PMON=`ps -ef | grep 'db2sys' | grep -v grep &gt; /dev/null 2&gt;&amp;1;echo $?` MYSQL_PMON=`ps -ef | grep 'mysqld' | grep -v grep &gt; /dev/null 2&gt;&amp;1;echo $?` INFOR_PMON=`ps -ef | grep 'oninit' | grep -v grep &gt; /dev/null 2&gt;&amp;1;echo $?` MONGO_PMON=`ps -ef | grep 'mongod' | grep -v grep &gt; /dev/null 2&gt;&amp;1;echo $?` GREEN_PMON=`ps -ef | grep 'greenplum' | grep -v grep &gt; /dev/null 2&gt;&amp;1;echo $?` if [ $ORA_PMON -eq 0 ];then mytype=oracle elif [ $DB2_PMON -eq 0 ];then mytype=db2 elif [ $MYSQL_PMON -eq 0 ];then mytype=mysql elif [ $INFOR_PMON -eq 0 ];then mytype=informix elif [ $MONGO_PMON -eq 0 ];then \t\tmytype=mongodb elif [ $GREEN_PMON -eq 0 ];then \t\tmytype=greenplum else mytype=app fi EOF gcp 详解 Usage: gcp [OPTIONS] 文件拷贝 \t\tgcp -l //1.2.3.4/tmp/1.txt -d //1.2.3.5//tmp/1.txt [-m 600] [-u genius] [-s True] [-a 0755] Options: -local, -l TEXT http url or //1.2.3.4/tmp/file or //repo/id/file 来源文件路径: \t\t\t - url: http://url \t\t \t - 来源主机路径: //ip/temp/local/file \t\t \t - 来源仓库: //repo/id/file\t \t\t \t -dest, -d TEXT //1.2.3.5/tmp/file 目标路径: - 目标主机路径: //ip/temp/dest/file\t\t\t\t\t\t -attr, -a INTEGER set file attr 文件传输后赋权,默认0755\t -user, -u TEXT set file user 文件所属用户 -passwd, -p TEXT exec passwd -timeout, -m TEXT timeout seconds 传输超时时间单位秒 -debug, -b TEXT debug mode -stdless, -s TEXT stdout less --help Show this message and exit. 示例1：拷贝文件 gcp -l //10.186.24.72/tmp/test -d //10.186.24.73/tmp/test 2019-07-22 16:53:59 ------------------------------------------------------- \t\t2019-07-22 16:53:59 download sucess local_file:/tmp/test remote_path http://10.186.24.72:4761/ \t\t2019-07-22 16:53:59 md5:d41d8cd98f00b204e9800998ecf8427e 2019-07-22 16:53:59 \t\t\t\t\t\t\tsize:0,time 0.34s,speed 0.00B/s 2019-07-22 16:53:59 \t\t\t\t\t\t download file sucess md5 is the same 示例2：拷贝文件到win主机 gcp -l //repo/5d4a66732cf82c5c6b02db1b/add.vbs -d //$IP/c/temp/add.vbs 示例3：拷贝文件指定文件的所属用户。（不想要系统的默认输出，只想判断传输状态。） gcp -l //$IP/$MEDIA_PATH/$i -d //$pri_ip/tmp/scripts/$i -u oracle &gt; /dev/null if [ $? -eq 0 ];then \techo \"$i copy ok!\" \telse \techo \"$i copy fail!\" exit 1 \tfi 实例4：在一个脚本里实现多个环境下发指定文件（文件事先上传到对应环境的文件中转站，环境参数由外部传入） ENV=$4 if [ $ENV = \"production\" ];then \t\tfilename=\"5d50cb33dc6dda5d52e350c2/linux_standard_security_reinforce.sh 5d5b9871dc6dda05ee223da8/Createvg_dg_18c.py 5d5b9871dc6dda05ee223da7/Createvg_18c.py 5d5ba4923bc2e619e553bd25/18Csysteminstall.sh\" elif [ $ENV = \"test\" ];then \t\tfilename=\"5d52633e83d3d1545df0178c/linux_standard_security_reinforce.sh 5d5b9a7683d3d13d607517b0/Createvg_dg_18c.py 5d5b9a7683d3d13d607517af/Createvg_18c.py 5d5bb28c83d3d13d607517b1/18Csysteminstall.sh\" fi for i in $filename do \t\tname=`echo $i |awk -F / {'print $NF'}` \t\tgcp -l //repo/$i -d //$IP/tmp/oracle/$name -u oracle &gt; /dev/null \t\tif [ $? -eq 0 ];then \t\techo \"$name copy ok!\" \t\telse \t\techo \"$name copy fail!\" \t\tfi done " }, { "title": "Enable Google Page Views", "url": "/posts/enable-google-pv/", "categories": "Blogging, Tutorial", "tags": "google analytics, pageviews", "date": "2021-01-04 07:32:00 +0800", "snippet": "This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well. Head to https://analytics.google.com/ and click on Start Measuring Enter your desired Account Name and choose the desired checkboxes Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard Enter the required information About your business Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps: Go to Admin on the left column Select the desired property from the drop-down on the second column Click on Data Streams Add a stream and click on Web Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml file:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID # Google Analytics pageviews report settings pv: proxy_endpoint: # fill in the Google Analytics superProxy endpoint of Google App Engine cache_path: # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine Visit https://console.cloud.google.com/appengine Click on Create Application Click on Create Project Enter the name and choose the data center close to you Select Python language and Standard environment Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient. Go to your App Engine dashboard on your browser and select API &amp; Services from the left navigation menu Click on Enable APIs and Services button on the top Enable the following APIs: Google Analytics API On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&lt;project-id&gt;.&lt;region&gt;.r.appspot.com/admin/auth Note down the Your Client ID and Your Client Secret. You’ll need this in the next section. Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart Run the following commands: [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=XYZ.apps.googleusercontent.com&amp;redirect_uri=ABCDEFGEnter verification code: &lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here Setup Google Analytics superProxy Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local. Remove the first 2 lines in the src/app.yaml file: - application: your-project-id- version: 1 In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard. Enter any random key for XSRF_KEY, your config.py should look similar to this #!/usr/bin/python2.7__author__ = 'pete.frisella@gmail.com (Pete Frisella)'# OAuth 2.0 Client SettingsAUTH_CONFIG = { 'OAUTH_CLIENT_ID': 'YOUR_CLIENT_ID', 'OAUTH_CLIENT_SECRET': 'YOUR_CLIENT_SECRET', 'OAUTH_REDIRECT_URI': '%s%s' % ( 'https://chirpy-test-XXXXXX.ue.r.appspot.com', '/admin/auth' )}# XSRF SettingsXSRF_KEY = 'OnceUponATimeThereLivedALegend' You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com.But, for the sake of keeping it simple, we will be using the Google provided default URL. From inside the src/ directory, deploy the app [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor: [/tmp/google-analytics-super-proxy/src/app.yaml]source: [/tmp/google-analytics-super-proxy/src]target project: [chirpy-test-XXXX]target service: [default]target version: [VESRION_NUM]target url: [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse Visit the deployed service. Add a /admin to the end of the URL. Click on Authorize Users and make sure to add yourself as a managed user. If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix. If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows: start-date: fill in the first day of blog posting end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date) metrics: select ga:pageviews dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1: filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=. Among them, ; means using logical AND to concatenate two rules. If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl. After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID pv: proxy_endpoint: 'https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&lt;ID FROM SUPER PROXY&gt;' cache_path: # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference Google Analytics Core Reporting API: Filters &#8617; " }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2019-08-11 00:34:00 +0800", "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files: browserconfig.xml site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files: File(s) From Online Tool From Chirpy *.PNG ✓ ✗ *.ICO ✓ ✗ ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition." }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "getting started", "date": "2019-08-09 20:55:00 +0800", "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler. In addition, Git is also required to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme: Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing. Forking on GitHub - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterCreate a new repository from the Chirpy Starter and name it &lt;GH_USERNAME&gt;.github.io, where GH_USERNAME represents your GitHub username.Option 2. Forking on GitHubFork Chirpy on GitHub and rename it to &lt;GH_USERNAME&gt;.github.io. Please note that the default branch code is in development. If you want the site to be stable, please switch to the latest tag and start writing.And then execute:$ bash tools/init.sh If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will: Removes some files or directories from your repository: .travis.yml files under _posts If the option --no-gh is provided, the directory .github will be deleted. Otherwise, set up the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github. Removes item Gemfile.lock from .gitignore. Creates a new commit to save the changes automatically.Installing DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options: url avatar timezone langCustoming StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of the style file.Starting from v4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, create a new file _sass/variables-hook.scss and assign new values to the target variable in it.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/assets/cross_origin.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\ --volume=\"$PWD:/srv/jekyll\" \\ -p 4000:4000 jekyll/jekyll \\ jekyll serveAfter a while, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using Github ActionsFor security reasons, GitHub Pages build runs on safe mode, which restricts us from using plugins to generate additional page files. Therefore, we can use GitHub Actions to build the site, store the built site files on a new branch, and use that branch as the source of the GitHub Pages service.Quickly check the files needed for GitHub Actions build: Ensure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the sample file, and the value of the on.push.branches should be the same as your repo’s default branch name. Ensure your Jekyll site has file tools/deploy.sh. Otherwise, copy it from here to your Jekyll site. Furthermore, if you have committed Gemfile.lock to the repo, and your runtime system is not Linux, don’t forget to update the platform list in the lock file: $ bundle lock --add-platform x86_64-linux After the above steps, rename your repository to &lt;GH_USERNAME&gt;.github.io on GitHub.Now publish your Jekyll site by: Push any commit to remote to trigger the GitHub Actions workflow. Once the build is complete and successful, a new remote branch named gh-pages will appear to store the built site files. Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar, and then in the section Source of GitHub Pages, select the /(root) directory of branch gh-pages as the publishing source. Remember to click Save before leaving. Visit your website at the address indicated by GitHub. Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\ --env JEKYLL_ENV=production \\ --volume=\"$PWD:/srv/jekyll\" \\ jekyll/jekyll \\ jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server.UpgradingIt depends on how you use the theme: If you are using the theme gem (there will be gem \"jekyll-theme-chirpy\" in the Gemfile), editing the Gemfile and update the version number of the theme gem, for example: - gem \"jekyll-theme-chirpy\", \"~&gt; 3.2\", \"&gt;= 3.2.1\"+ gem \"jekyll-theme-chirpy\", \"~&gt; 3.3\", \"&gt;= 3.3.0\" And then execute the following command: $ bundle update jekyll-theme-chirpy As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme. If you forked from the source project (there will be gemspec in the Gemfile of your site), then merge the latest upstream tags into your Jekyll site to complete the upgrade.The merge is likely to conflict with your local modifications. Please be patient and careful to resolve these conflicts. " }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "writing", "date": "2019-08-08 14:10:00 +0800", "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Add author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one.)&lt;author_id&gt;: name: &lt;full name&gt; twitter: &lt;twitter_of_author&gt; url: &lt;homepage_of_author&gt;And then set up the custom author in the post’s YAML block:---author: &lt;author_id&gt;--- Another benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. Once the position is specified, the image caption should not be added. Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\"&gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute path, width, height, and alt for the image:---image: path: /path/to/image/file width: 1000 # in pixels height: 400 # in pixels alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value``` The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Demo", "tags": "typography", "date": "2019-08-08 11:33:00 +0800", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph Task list TODO Completed Defeat COVID-19 Vaccine production Economic recovery People smile again Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line shows the block quote.Prompts An example showing the tip type prompt. An example showing the info type prompt. An example showing the warning type prompt. An example showing the danger type prompt.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images Default (with caption)Full screen width and center alignment Shadowshadow effect (visible in light mode) Left aligned Float to left “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Float to right “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then echo \"The command was not successful.\"; #do the needful / exitfi;Specific filename@import \"colors/light-typography\", \"colors/dark-typography\"Reverse Footnote The footnote source &#8617; The 2nd footnote source &#8617; " } ]
